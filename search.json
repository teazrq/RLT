[{"path":"https://teazrq.github.io/RLT/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ruoqing Zhu. Author, maintainer, copyright holder. Sarah Formentini. Author. Haowen Zhou. Contributor. Zhechao Huang. Contributor.","code":""},{"path":"https://teazrq.github.io/RLT/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhu R. (). Reinforcement Learning Trees, R package version 4.1.5. Zhu, R., Zeng, D., & Kosorok, M. R. (2015). Reinforcement learning trees. Journal American Statistical Association, 110(512), 1770-1784. Zhu, R. & Kosorok, M. R. (2012). Recursively imputed survival trees. Journal American Statistical Association, 107(497), 331-340.","code":"@Manual{,   title = {RLT: Reinforcement Learning Trees},   author = {R. Zhu},   publisher = {manual},   note = {R package version 4.1.5},   url = {https://cran.r-project.org/package=RLT},   pdf = {https://cran.r-project.org/web/packages/RLT/RLT.pdf}, } @Article{,   title = {Reinforcement Learning Trees},   author = {Ruoqing Zhu and Donglin Zeng and Michael R. Kosorok},   journal = {Journal of the American Statistical Association},   year = {2015},   volume = {110},   number = {512},   pages = {1770-1784},   doi = {10.1080/01621459.2015.1036994},   url = {http://dx.doi.org/10.1080/01621459.2015.1036994}, } @Article{,   title = {Recursively imputed survival trees},   author = {Ruoqing Zhu and Michael R. Kosorok},   journal = {Journal of the American Statistical Association},   year = {2012},   volume = {107},   number = {497},   pages = {331-340},   doi = {10.1080/01621459.2011.637468},   url = {http://dx.doi.org/10.1080/01621459.2011.637468}, }"},{"path":"https://teazrq.github.io/RLT/index.html","id":"rlt","dir":"","previous_headings":"","what":"Reinforcement Learning Trees","title":"Reinforcement Learning Trees","text":"new version (>= 4.0.0) RLT package. Versions prior 4.0.0 written C (available RLT-Archive), newer versions based C++. new version replace original CRAN package finished. goal RLT provide new functionalities random forest models. includes embedded model fit learning better splitting rule; linear combination splits, confidence intervals, several new approaches currently developed.","code":""},{"path":"https://teazrq.github.io/RLT/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Reinforcement Learning Trees","text":"can install version using want use embedded model feature, need install released version (currently <= 3.2.2) RLT CRAN :","code":"# install.packages(\"devtools\")     devtools::install_github(\"teazrq/RLT\") install.packages(\"RLT\")"},{"path":"https://teazrq.github.io/RLT/index.html","id":"new-features-highlight","dir":"","previous_headings":"","what":"New features highlight","title":"Reinforcement Learning Trees","text":"Unbiased variance estimation (regression forest) based Xu, Zhu Shao (2022+) Unbiased survival function confidence band estimation based Formentini, Liang Zhu (2022+) Reproducibility parallel tree version xoshiro256plus random number generator Speed space improvement eariler c version [implemented] Graph random forests [implemented] Python API","code":""},{"path":"https://teazrq.github.io/RLT/reference/RLT.html","id":null,"dir":"Reference","previous_headings":"","what":"            Reinforcement Learning Trees\n — RLT","title":"            Reinforcement Learning Trees\n — RLT","text":"x data.frame, factors treated categorical variables. specify parameters embedded models reinforcement = TRUE, users can supply following param.control list: embed.resample.prob: proportion samples (internal node) embedded model embed.mtry: number proportion variables embed.nmin terminal node size embed.split.gen random cutting point search method (\"random\", \"rank\" \"best\") embed.nsplit number random cutting points. experimental features, please see check_param_RLT.","code":"Fit models for regression, classification and                     survival analysis using reinforced splitting rules.                    The model reduces to regular random forests if                     reinforcement is turned off."},{"path":"https://teazrq.github.io/RLT/reference/RLT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"            Reinforcement Learning Trees\n — RLT","text":"","code":"RLT(   x,   y,   censor = NULL,   model = NULL,   ntrees = if (reinforcement) 100 else 500,   mtry = max(1, as.integer(ncol(x)/3)),   nmin = max(1, as.integer(log(nrow(x)))),   split.gen = \"random\",   nsplit = 1,   resample.replace = TRUE,   resample.prob = if (resample.replace) 1 else 0.8,   resample.preset = NULL,   resample.track = FALSE,   obs.w = NULL,   var.w = NULL,   linear.comb = 1,   importance = FALSE,   var.ready = FALSE,   reinforcement = FALSE,   param.control = list(),   ncores = 0,   verbose = 0,   seed = NULL,   ... )"},{"path":"https://teazrq.github.io/RLT/reference/RLT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"            Reinforcement Learning Trees\n — RLT","text":"x matrix data.frame features y Response variable. numeric/factor vector. censor censoring indicator survival model used. model model type: \"regression\", \"classification\" \"survival\". ntrees Number trees, ntrees = 100 reinforcement used ntrees = 1000 otherwise. mtry Number randomly selected variables used internal node. nmin Terminal node size. Splitting stop internal node size less twice nmin. almost equivalent setting nodesize \\(= 2 \\times\\) nmin randomForest package. split.gen cutting points generated: \"random\", \"rank\" \"best\". minimum child node size enforced (alpha $> 0$), \"rank\" \"best\" used. nsplit Number random cutting points compare variable internal node. resample.replace Whether -bag samples obtained replacement. resample.prob Proportion -bag samples. resample.preset pre-specified matrix -bag data indicator/count matrix. must \\(n \\times\\) ntrees matrix contain negative values. Extremely large counts recommended, sum column exceed \\(n\\). provided, resample.track set TRUE. feature mainly use estimating variances random forest. Use risk. resample.track Whether keep track observations used tree. obs.w Observation weights var.w Variable weights. supplied, default perform weighted sampling mtry variables. usage, see details split.rule check_param_RLT. linear.comb linear.comb larger 1, linear combination split used. reinforcement TRUE, variables highest potential internal node used. reinforcement FALSE, marginal screening used. cases, SIR SAVE used determine coefficients combination. categorical variable highest potential, single variable used. Currently restricted less 5 number variables linear combination. importance Whether calculate variable importance measures. calculation follows Breiman's original permutation strategy. var.ready Construct resample.preset automatically allow variance estimations prediction. used, resample.replace set FALSE resample.prob larger \\(n / 2\\). recommended use large ntrees, e.g, 10000 larger. resample.prob greater \\(n / 2\\), one use Reg_Var_Forest function. reinforcement reinforcement splitting rule used. Default \"FALSE\", .e., regular random forests. activated, embedded model tuning parameters automatically chosen. can also specified RLT.control. param.control list additional parameters. can used specify features random forest set embedded model parameters reinforcement splitting rules. See check_param_RLT set_embed_param details. using reinforcement = TRUE automatically generate default tunings. However, necessarily good. ncores Number cores. Default 0 (using available cores). verbose Whether fitting info printed. seed Random seed number replicate previously fitted forest. Internally, xoshiro256++ generator used. specified, seed generated automatically. ... Additional arguments.","code":""},{"path":"https://teazrq.github.io/RLT/reference/RLT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"            Reinforcement Learning Trees\n — RLT","text":"RLT object, constructed list consisting FittedForest Fitted tree structures VarImp Variable importance measures, importance = TRUE Prediction -bag prediction values OOBPrediction --bag prediction values ObsTrack \\(n \\times\\) ntrees matrix indicates observations used tree. Provided resample.preset used resample.track = TRUE. Survival Forests NFail number observed failure times VarImpCov VI.var=TRUE, estimated covariance matrix variable importance cindex_tree --bag c-index tree cindex --bag c-index forest timepoints ordered observed failure times y.point order \\(y\\) observed failure times","code":""},{"path":"https://teazrq.github.io/RLT/reference/RLT.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"            Reinforcement Learning Trees\n — RLT","text":"Zhu, R., Zeng, D., & Kosorok, M. R. (2015) \"Reinforcement Learning Trees.\" Journal American Statistical Association. 110(512), 1770-1784.","code":""},{"path":"https://teazrq.github.io/RLT/reference/RegForest.html","id":null,"dir":"Reference","previous_headings":"","what":"RegForest — RegForest","title":"RegForest — RegForest","text":"Internal function fitting regression forest","code":""},{"path":"https://teazrq.github.io/RLT/reference/RegForest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RegForest — RegForest","text":"","code":"RegForest(x, y, ncat, obs.w, var.w, resample.preset, param, ...)"},{"path":"https://teazrq.github.io/RLT/reference/Reg_Var_Forest.html","id":null,"dir":"Reference","previous_headings":"","what":"            Regression random forest with variance estimation\n — Reg_Var_Forest","title":"            Regression random forest with variance estimation\n — Reg_Var_Forest","text":"","code":"This function provides some experimental features                     to estimate the variance of random forests, especially                    when the sub-sampling size is larger than \\eqn{n/2}.                     These trees will always be sampled without replacement.                    The choices of tuning parameters will be limited.                    Use at your own risk."},{"path":"https://teazrq.github.io/RLT/reference/Reg_Var_Forest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"            Regression random forest with variance estimation\n — Reg_Var_Forest","text":"","code":"Reg_Var_Forest(   x,   y,   testx,   ntrees = 10000,   mtry = max(1, as.integer(ncol(x)/3)),   nmin = max(1, as.integer(log(nrow(x)))),   split.gen = \"best\",   nsplit = 0,   resample.prob = 0.5,   param.control = list(),   ncores = 1,   verbose = 0,   seed = NULL,   ... )"},{"path":"https://teazrq.github.io/RLT/reference/Reg_Var_Forest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"            Regression random forest with variance estimation\n — Reg_Var_Forest","text":"x matrix data.frame features y Response variable. numeric/factor vector. testx matrix data.frame testing data ntrees Number trees. obtain stable accurate estimation, default ntrees = 10000. mtry Number randomly selected variables used internal node. nmin Terminal node size. used RLT. split.gen \"random\", \"rank\" \"best\". nsplit Number random cutting points compare variable internal node. resample.prob Proportion -bag samples. param.control list additional parameters. However, choices limited. example, reinforcement splitting rules implemented. ncores Number cores. Default 0 (using available cores). verbose Whether fitting info printed. seed Random seed number replicate previously fitted forest. Internally, xoshiro256++ generator used. specified, seed generated automatically. ... Additional arguments.","code":""},{"path":"https://teazrq.github.io/RLT/reference/Reg_Var_Forest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"            Regression random forest with variance estimation\n — Reg_Var_Forest","text":"","code":"Prediction and variance estimation of the testing data"},{"path":"https://teazrq.github.io/RLT/reference/SurvForest.html","id":null,"dir":"Reference","previous_headings":"","what":"SurvForest — SurvForest","title":"SurvForest — SurvForest","text":"Internal function fitting survival forest","code":""},{"path":"https://teazrq.github.io/RLT/reference/SurvForest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SurvForest — SurvForest","text":"","code":"SurvForest(x, y, censor, ncat, obs.w, var.w, resample.preset, param, ...)"},{"path":"https://teazrq.github.io/RLT/reference/Surv_Cov_Forest.html","id":null,"dir":"Reference","previous_headings":"","what":"            Survival random forest with covariance estimation\n — Surv_Cov_Forest","title":"            Survival random forest with covariance estimation\n — Surv_Cov_Forest","text":"","code":"These trees will always be sampled without replacement.                    The choices of tuning parameters will be limited.                    Use at your own risk."},{"path":"https://teazrq.github.io/RLT/reference/Surv_Cov_Forest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"            Survival random forest with covariance estimation\n — Surv_Cov_Forest","text":"","code":"Surv_Cov_Forest(   x,   y,   censor,   testx,   ntrees = 10000,   mtry = max(1, as.integer(ncol(x)/3)),   nmin = max(1, as.integer(log(nrow(x)))),   split.gen = \"best\",   nsplit = 0,   resample.prob = 0.5,   param.control = list(),   ncores = 1,   verbose = 0,   seed = NULL,   ... )"},{"path":"https://teazrq.github.io/RLT/reference/Surv_Cov_Forest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"            Survival random forest with covariance estimation\n — Surv_Cov_Forest","text":"x matrix data.frame features y Response variable. numeric/factor vector. censor censoring indicator survival model used. testx matrix data.frame testing data ntrees Number trees. obtain stable accurate estimation, default ntrees = 10000. mtry Number randomly selected variables used internal node. nmin Terminal node size. used RLT. split.gen \"random\", \"rank\" \"best\". nsplit Number random cutting points compare variable internal node. resample.prob Proportion -bag samples. param.control list additional parameters. However, choices limited. example, reinforcement splitting rules implemented. ncores Number cores. Default 0 (using available cores). verbose Whether fitting info printed. seed Random seed number replicate previously fitted forest. Internally, xoshiro256++ generator used. specified, seed generated automatically. ... Additional arguments.","code":""},{"path":"https://teazrq.github.io/RLT/reference/Surv_Cov_Forest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"            Survival random forest with covariance estimation\n — Surv_Cov_Forest","text":"","code":"Prediction and covariance estimation of the testing data"},{"path":"https://teazrq.github.io/RLT/reference/check_input.html","id":null,"dir":"Reference","previous_headings":"","what":"check_input — check_input","title":"check_input — check_input","text":"Check input arguments determine model use","code":""},{"path":"https://teazrq.github.io/RLT/reference/check_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_input — check_input","text":"","code":"check_input(x, y, censor, model)"},{"path":"https://teazrq.github.io/RLT/reference/check_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check_input — check_input","text":"x x y x censor censoring indicator model model type","code":""},{"path":"https://teazrq.github.io/RLT/reference/check_param_RLT.html","id":null,"dir":"Reference","previous_headings":"","what":"check_param_RLT — check_param_RLT","title":"check_param_RLT — check_param_RLT","text":"Check parameters following parameters, needed can specified param.control list. alpha can specify minimum number observations required child node portion parent node. Must within [0, 0.5). alpha $> 0$ split.gen rank best, force child node contain least \\(\\max(\\texttt{nmin}, \\alpha \\times N_A)\\) number number observations, \\(N_A\\) sample size current internal node. mainly theoretical concern. split.rule specifies splitting rule comparisons. regression, variance reduction \"var\" used; classification, \"gini\" index used. survival, \"logrank\", \"suplogrank\", \"coxgrad\" available. \"coxgrad\" used, variable weights \"var.w\" used penalty. VI.var=TRUE calculate variance variable importance.  VI.var=TRUE, resamp.prob(1-oob.prop) observations used building tree, resamp.proboob.prop observations used --bag sample, 1-resamp.prob observations used -bag --bag samples tree . implemented survival forests. Ignored otherwise. oob.prop used VI.var=TRUE. Specifies proportion resamp.prob assigned --bag sample. Default oob.prop=0.5. See VI.var details. implemented survival forests. Ignored otherwise.","code":""},{"path":"https://teazrq.github.io/RLT/reference/check_param_RLT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_param_RLT — check_param_RLT","text":"","code":"check_param_RLT(   n,   p,   ntrees,   mtry,   nmin,   split.gen,   nsplit,   resample.replace,   resample.prob,   resample.track,   use.obs.w,   use.var.w,   linear.comb,   importance,   var.ready,   ncores,   verbose,   reinforcement,   param.control )"},{"path":"https://teazrq.github.io/RLT/reference/cindex.html","id":null,"dir":"Reference","previous_headings":"","what":"C-index — cindex","title":"C-index — cindex","text":"Calculate c-index survival data","code":""},{"path":"https://teazrq.github.io/RLT/reference/cindex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C-index — cindex","text":"","code":"cindex(y, censor, pred, ...)"},{"path":"https://teazrq.github.io/RLT/reference/cindex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"C-index — cindex","text":"y survival time censor censoring indicator survival model used pred predicted value subject","code":""},{"path":"https://teazrq.github.io/RLT/reference/cindex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"C-index — cindex","text":"c-index","code":""},{"path":"https://teazrq.github.io/RLT/reference/forest.kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"      kernel.RLT\n — forest.kernel","title":"      kernel.RLT\n — forest.kernel","text":"","code":"Get random forest induced kernel weight matrix of testing samples               or between any two sets of data. This is an experimental feature.              Use at your own risk."},{"path":"https://teazrq.github.io/RLT/reference/forest.kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"      kernel.RLT\n — forest.kernel","text":"","code":"forest.kernel(   object,   X1 = NULL,   X2 = NULL,   vs.train = FALSE,   verbose = FALSE,   ... )"},{"path":"https://teazrq.github.io/RLT/reference/forest.kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"      kernel.RLT\n — forest.kernel","text":"object fitted RLT object. X1 first dataset. calculates \\(n_1 \\times n_1\\) kernel matrix X1. X2 second dataset relative kernel weights required. X2 supplied, calculate \\(n_1 \\times n_2\\) kernel matrix. vs.train used, must original training data. vs.train calculate kernel weights respect training data. slightly different supplying training data X2 due re-samplings training process. Hence, ObsTrack must available fitted object (using resample.track = TRUE). verbose Whether fitting printed. ... ...   Additional arguments.","code":""},{"path":"https://teazrq.github.io/RLT/reference/get.one.tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a single tree — get.one.tree","title":"Print a single tree — get.one.tree","text":"Print single fitted tree forest object","code":""},{"path":"https://teazrq.github.io/RLT/reference/get.one.tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a single tree — get.one.tree","text":"","code":"get.one.tree(x, tree = 1, ...)"},{"path":"https://teazrq.github.io/RLT/reference/get.one.tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a single tree — get.one.tree","text":"x fitted RLT object tree tree number, starting 1 ntrees. ... ...","code":""},{"path":"https://teazrq.github.io/RLT/reference/my_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"            samples\n — my_sample","title":"            samples\n — my_sample","text":"","code":"testing function"},{"path":"https://teazrq.github.io/RLT/reference/my_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"            samples\n — my_sample","text":"","code":"my_sample(Num, min, max)"},{"path":"https://teazrq.github.io/RLT/reference/predict.RLT.html","id":null,"dir":"Reference","previous_headings":"","what":"prediction using RLT — predict.RLT","title":"prediction using RLT — predict.RLT","text":"Predict outcome (regression, classification survival) using fitted RLT object","code":""},{"path":"https://teazrq.github.io/RLT/reference/predict.RLT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prediction using RLT — predict.RLT","text":"","code":"# S3 method for RLT predict(   object,   testx = NULL,   var.est = FALSE,   keep.all = FALSE,   ncores = 1,   verbose = 0,   ... )"},{"path":"https://teazrq.github.io/RLT/reference/predict.RLT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prediction using RLT — predict.RLT","text":"object fitted RLT object testx testing samples, must structure training samples var.est Whether estimate variance testing data. original forest must fitted var.ready = TRUE. survival forests, calculates covariance matrix observed time points calculates critical value confidence band. keep.whether keep prediction trees ncores number cores ... ...","code":""},{"path":"https://teazrq.github.io/RLT/reference/predict.RLT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prediction using RLT — predict.RLT","text":"RLT prediction object, constructed list consisting Prediction Prediction Variance var.est = TRUE fitted object var.ready = TRUE Survival Forests hazard predicted hazard functions CumHazard predicted cumulative hazard function Survival predicted survival function Allhazard keep.= TRUE, predicted hazard function observation tree AllCHF keep.= TRUE, predicted cumulative hazard function observation tree Cov var.est = TRUE fitted object var.ready = TRUE. test subject, matrix size NFail\\(\\times\\)NFail NFail number observed failure times training data Var var.est = TRUE fitted object var.ready = TRUE. Marginal variance subject timepoints ordered observed failure times training data MarginalVar var.est = TRUE fitted object var.ready = TRUE. Marginal variance subject Cov matrix projected nearest positive definite matrix MarginalVarSmooth var.est = TRUE fitted object var.ready = TRUE. Marginal variance subject Cov matrix projected nearest positive definite matrix smoothed using Gaussian kernel smoothing CVproj var.est = TRUE fitted object var.ready = TRUE. Critical values calculate confidence bands around cumulative hazard predictions several confidence levels. Calculated using MarginalVar CVprojSmooth var.est = TRUE fitted object var.ready = TRUE. Critical values calculate confidence bands around cumulative hazard predictions several confidence levels. Calculated using MarginalVarSmooth","code":""},{"path":"https://teazrq.github.io/RLT/reference/print.RLT.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a RLT object — print.RLT","title":"Print a RLT object — print.RLT","text":"Print RLT object","code":""},{"path":"https://teazrq.github.io/RLT/reference/print.RLT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a RLT object — print.RLT","text":"","code":"# S3 method for RLT print(x, ...)"},{"path":"https://teazrq.github.io/RLT/reference/print.RLT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a RLT object — print.RLT","text":"x fitted RLT object ... ...","code":""},{"path":"https://teazrq.github.io/RLT/reference/set_embed_param.html","id":null,"dir":"Reference","previous_headings":"","what":"set_embed_param — set_embed_param","title":"set_embed_param — set_embed_param","text":"internal function set parameters embedded model.","code":""},{"path":"https://teazrq.github.io/RLT/reference/set_embed_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set_embed_param — set_embed_param","text":"","code":"set_embed_param(control, reinforcement, n, p)"}]
